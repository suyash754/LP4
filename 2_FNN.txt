	2_FNN
import numpy as np
import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

train_data_dir = r'D:\B190358508\DL\DL LP-4\Datasets\mnist-jpg\mnist-jpg\train'
test_data_dir = r'D:\B190358508\DL\DL LP-4\Datasets\mnist-jpg\mnist-jpg\test'

train_datagen = ImageDataGenerator(
rescale=1/255
)

test_datagen = ImageDataGenerator(
rescale=1/255
)

train_batch_size = 10000
train_generator = train_datagen.flow_from_directory(
 train_data_dir,
 target_size=(28, 28),
 batch_size=train_batch_size,
 class_mode='categorical',
 color_mode='grayscale',
 shuffle=True,
)

test_batch_size = 2000
test_generator = test_datagen.flow_from_directory(
 test_data_dir,
 target_size=(28, 28),
 batch_size=test_batch_size,
 class_mode='categorical', 
 color_mode='grayscale',
 shuffle=True,
)


x_train, y_train = train_generator[0]
x_test, y_test = test_generator[0]
print(x_train.shape, y_train.shape)
print(x_test.shape, y_test.shape)

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu',input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5, batch_size=64,
validation_data=(x_test, y_test))

test_loss, test_accuracy = model.evaluate(x_test, y_test)
print("Loss: ", test_loss)
print("Accuracy: ", test_accuracy)

n = 30
plt.imshow(x_test[n])
predicted_value = model.predict(x_test)
print("Actual Number: ",np.argmax(y_test[n]))
print("Predicted Number: ", np.argmax(predicted_value[n]))